// Structures
#include "scalar.h"



// Simulation parameters


__device__ __constant__ float viridis_colormap[256][3] = {
    {0.267004, 0.004874, 0.329415}, {0.268510, 0.009605, 0.335427},
     {0.269944, 0.014625, 0.341379}, {0.271305, 0.019942, 0.347269},
      {0.272594, 0.025563, 0.353093}, {0.273809, 0.031497, 0.358853},
       {0.274952, 0.037752, 0.364543}, {0.276022, 0.044167, 0.370164},
        {0.277018, 0.050344, 0.375715}, {0.277941, 0.056324, 0.381191},
         {0.278791, 0.062145, 0.386592}, {0.279566, 0.067836, 0.391917},
          {0.280267, 0.073417, 0.397163}, {0.280894, 0.078907, 0.402329},
           {0.281446, 0.084320, 0.407414}, {0.281924, 0.089666, 0.412415},
            {0.282327, 0.094955, 0.417331}, {0.282656, 0.100196, 0.422160},
             {0.282910, 0.105393, 0.426902}, {0.283091, 0.110553, 0.431554},
              {0.283197, 0.115680, 0.436115}, {0.283229, 0.120777, 0.440584},
               {0.283187, 0.125848, 0.444960}, {0.283072, 0.130895, 0.449241},
                {0.282884, 0.135920, 0.453427}, {0.282623, 0.140926, 0.457517},
                 {0.282290, 0.145912, 0.461510}, {0.281887, 0.150881, 0.465405},
                  {0.281412, 0.155834, 0.469201}, {0.280868, 0.160771, 0.472899},
                   {0.280255, 0.165693, 0.476498}, {0.279574, 0.170599, 0.479997},
                    {0.278826, 0.175490, 0.483397}, {0.278012, 0.180367, 0.486697},
                     {0.277134, 0.185228, 0.489898}, {0.276194, 0.190074, 0.493001},
                      {0.275191, 0.194905, 0.496005}, {0.274128, 0.199721, 0.498911},
                       {0.273006, 0.204520, 0.501721}, {0.271828, 0.209303, 0.504434},
                        {0.270595, 0.214069, 0.507052}, {0.269308, 0.218818, 0.509577},
                         {0.267968, 0.223549, 0.512008}, {0.266580, 0.228262, 0.514349},
                          {0.265145, 0.232956, 0.516599}, {0.263663, 0.237631, 0.518762},
                           {0.262138, 0.242286, 0.520837}, {0.260571, 0.246922, 0.522828},
                            {0.258965, 0.251537, 0.524736}, {0.257322, 0.256130, 0.526563},
                             {0.255645, 0.260703, 0.528312}, {0.253935, 0.265254, 0.529983},
                              {0.252194, 0.269783, 0.531579}, {0.250425, 0.274290, 0.533103},
                               {0.248629, 0.278775, 0.534556}, {0.246811, 0.283237, 0.535941},
                                {0.244972, 0.287675, 0.537260}, {0.243113, 0.292092, 0.538516},
                                 {0.241237, 0.296485, 0.539709}, {0.239346, 0.300855, 0.540844},
                                  {0.237441, 0.305202, 0.541921}, {0.235526, 0.309527, 0.542944},
                                   {0.233603, 0.313828, 0.543914}, {0.231674, 0.318106, 0.544834},
                                    {0.229739, 0.322361, 0.545706}, {0.227802, 0.326594, 0.546532},
                                     {0.225863, 0.330805, 0.547314}, {0.223925, 0.334994, 0.548053},
                                      {0.221989, 0.339161, 0.548752}, {0.220057, 0.343307, 0.549413},
                                       {0.218130, 0.347432, 0.550038}, {0.216210, 0.351535, 0.550627},
                                        {0.214298, 0.355619, 0.551184}, {0.212395, 0.359683, 0.551710},
                                         {0.210503, 0.363727, 0.552206}, {0.208623, 0.367752, 0.552675},
                                          {0.206756, 0.371758, 0.553117}, {0.204903, 0.375746, 0.553533},
                                           {0.203063, 0.379716, 0.553925}, {0.201239, 0.383670, 0.554294},
                                            {0.199430, 0.387607, 0.554642}, {0.197636, 0.391528, 0.554969},
                                             {0.195860, 0.395433, 0.555276}, {0.194100, 0.399323, 0.555565},
                                              {0.192357, 0.403199, 0.555836}, {0.190631, 0.407061, 0.556089},
                                               {0.188923, 0.410910, 0.556326}, {0.187231, 0.414746, 0.556547},
                                                {0.185556, 0.418570, 0.556753}, {0.183898, 0.422383, 0.556944},
                                                 {0.182256, 0.426184, 0.557120}, {0.180629, 0.429975, 0.557282},
                                                  {0.179019, 0.433756, 0.557430}, {0.177423, 0.437527, 0.557565},
                                                   {0.175841, 0.441290, 0.557685}, {0.174274, 0.445044, 0.557792},
                                                    {0.172719, 0.448791, 0.557885}, {0.171176, 0.452530, 0.557965},
                                                     {0.169646, 0.456262, 0.558030}, {0.168126, 0.459988, 0.558082},
                                                      {0.166617, 0.463708, 0.558119}, {0.165117, 0.467423, 0.558141},
                                                       {0.163625, 0.471133, 0.558148}, {0.162142, 0.474838, 0.558140}, {0.160665, 0.478540, 0.558115}, {0.159194, 0.482237, 0.558073}, {0.157729, 0.485932, 0.558013}, {0.156270, 0.489624, 0.557936}, {0.154815, 0.493313, 0.557840}, {0.153364, 0.497000, 0.557724}, {0.151918, 0.500685, 0.557587}, {0.150476, 0.504369, 0.557430}, {0.149039, 0.508051, 0.557250}, {0.147607, 0.511733, 0.557049}, {0.146180, 0.515413, 0.556823}, {0.144759, 0.519093, 0.556572}, {0.143343, 0.522773, 0.556295}, {0.141935, 0.526453, 0.555991}, {0.140536, 0.530132, 0.555659}, {0.139147, 0.533812, 0.555298}, {0.137770, 0.537492, 0.554906}, {0.136408, 0.541173, 0.554483}, {0.135066, 0.544853, 0.554029}, {0.133743, 0.548535, 0.553541}, {0.132444, 0.552216, 0.553018}, {0.131172, 0.555899, 0.552459}, {0.129933, 0.559582, 0.551864}, {0.128729, 0.563265, 0.551229}, {0.127568, 0.566949, 0.550556}, {0.126453, 0.570633, 0.549841}, {0.125394, 0.574318, 0.549086}, {0.124395, 0.578002, 0.548287}, {0.123463, 0.581687, 0.547445}, {0.122606, 0.585371, 0.546557}, {0.121831, 0.589055, 0.545623}, {0.121148, 0.592739, 0.544641}, {0.120565, 0.596422, 0.543611}, {0.120092, 0.600104, 0.542530}, {0.119738, 0.603785, 0.541400}, {0.119512, 0.607464, 0.540218}, {0.119423, 0.611141, 0.538982}, {0.119483, 0.614817, 0.537692}, {0.119699, 0.618490, 0.536347}, {0.120081, 0.622161, 0.534946}, {0.120638, 0.625828, 0.533488}, {0.121380, 0.629492, 0.531973}, {0.122312, 0.633153, 0.530398}, {0.123444, 0.636809, 0.528763}, {0.124780, 0.640461, 0.527068}, {0.126326, 0.644107, 0.525311}, {0.128087, 0.647749, 0.523491}, {0.130067, 0.651384, 0.521608}, {0.132268, 0.655014, 0.519661}, {0.134692, 0.658636, 0.517649}, {0.137339, 0.662252, 0.515571}, {0.140210, 0.665859, 0.513427}, {0.143303, 0.669459, 0.511215}, {0.146616, 0.673050, 0.508936}, {0.150148, 0.676631, 0.506589}, {0.153894, 0.680203, 0.504172}, {0.157851, 0.683765, 0.501686}, {0.162016, 0.687316, 0.499129}, {0.166383, 0.690856, 0.496502}, {0.170948, 0.694384, 0.493803}, {0.175707, 0.697900, 0.491033}, {0.180653, 0.701402, 0.488189}, {0.185783, 0.704891, 0.485273}, {0.191090, 0.708366, 0.482284}, {0.196571, 0.711827, 0.479221}, {0.202219, 0.715272, 0.476084}, {0.208030, 0.718701, 0.472873}, {0.214000, 0.722114, 0.469588}, {0.220124, 0.725509, 0.466226}, {0.226397, 0.728888, 0.462789}, {0.232815, 0.732247, 0.459277}, {0.239374, 0.735588, 0.455688}, {0.246070, 0.738910, 0.452024}, {0.252899, 0.742211, 0.448284}, {0.259857, 0.745492, 0.444467}, {0.266941, 0.748751, 0.440573}, {0.274149, 0.751988, 0.436601}, {0.281477, 0.755203, 0.432552}, {0.288921, 0.758394, 0.428426}, {0.296479, 0.761561, 0.424223}, {0.304148, 0.764704, 0.419943}, {0.311925, 0.767822, 0.415586}, {0.319809, 0.770914, 0.411152}, {0.327796, 0.773980, 0.406640}, {0.335885, 0.777018, 0.402049}, {0.344074, 0.780029, 0.397381}, {0.352360, 0.783011, 0.392636}, {0.360741, 0.785964, 0.387814}, {0.369214, 0.788888, 0.382914}, {0.377779, 0.791781, 0.377939}, {0.386433, 0.794644, 0.372886}, {0.395174, 0.797475, 0.367757}, {0.404001, 0.800275, 0.362552}, {0.412913, 0.803041, 0.357269}, {0.421908, 0.805774, 0.351910}, {0.430983, 0.808473, 0.346476}, {0.440137, 0.811138, 0.340967}, {0.449368, 0.813768, 0.335384}, {0.458674, 0.816363, 0.329727}, {0.468053, 0.818921, 0.323998}, {0.477504, 0.821444, 0.318195}, {0.487026, 0.823929, 0.312321}, {0.496615, 0.826376, 0.306377}, {0.506271, 0.828786, 0.300362}, {0.515992, 0.831158, 0.294279}, {0.525776, 0.833491, 0.288127}, {0.535621, 0.835785, 0.281908}, {0.545524, 0.838039, 0.275626}, {0.555484, 0.840254, 0.269281}, {0.565498, 0.842430, 0.262877}, {0.575563, 0.844566, 0.256415}, {0.585678, 0.846661, 0.249897}, {0.595839, 0.848717, 0.243329}, {0.606045, 0.850733, 0.236712}, {0.616293, 0.852709, 0.230052}, {0.626579, 0.854645, 0.223353}, {0.636902, 0.856542, 0.216620}, {0.647257, 0.858400, 0.209861}, {0.657642, 0.860219, 0.203082}, {0.668054, 0.861999, 0.196293}, {0.678489, 0.863742, 0.189503}, {0.688944, 0.865448, 0.182725}, {0.699415, 0.867117, 0.175971}, {0.709898, 0.868751, 0.169257}, {0.720391, 0.870350, 0.162603}, {0.730889, 0.871916, 0.156029}, {0.741388, 0.873449, 0.149561}, {0.751884, 0.874951, 0.143228}, {0.762373, 0.876424, 0.137064}, {0.772852, 0.877868, 0.131109}, {0.783315, 0.879285, 0.125405}, {0.793760, 0.880678, 0.120005}, {0.804182, 0.882046, 0.114965}, {0.814576, 0.883393, 0.110347}, {0.824940, 0.884720, 0.106217}, {0.835270, 0.886029, 0.102646}, {0.845561, 0.887322, 0.099702}, {0.855810, 0.888601, 0.097452}, {0.866013, 0.889868, 0.095953}, {0.876168, 0.891125, 0.095250}, {0.886271, 0.892374, 0.095374}, {0.896320, 0.893616, 0.096335}, {0.906311, 0.894855, 0.098125}, {0.916242, 0.896091, 0.100717}, {0.926106, 0.897330, 0.104071}, {0.935904, 0.898570, 0.108131}, {0.945636, 0.899815, 0.112838}, {0.955300, 0.901065, 0.118128}, {0.964894, 0.902323, 0.123941}, {0.974417, 0.903590, 0.130215}, {0.983868, 0.904867, 0.136897}, {0.993248, 0.906157, 0.143936}
};

__device__ __constant__ float blue_to_white_colormap[256][3] = {
    {0.000000f, 0.000000f, 1.000000f}, // 0: Blu puro
    {0.003922f, 0.003922f, 1.000000f}, // 1
    {0.007843f, 0.007843f, 1.000000f}, // 2
    {0.011765f, 0.011765f, 1.000000f}, // 3
    {0.015686f, 0.015686f, 1.000000f}, // 4
    {0.019608f, 0.019608f, 1.000000f}, // 5
    {0.023529f, 0.023529f, 1.000000f}, // 6
    {0.027451f, 0.027451f, 1.000000f}, // 7
    {0.031373f, 0.031373f, 1.000000f}, // 8
    {0.035294f, 0.035294f, 1.000000f}, // 9
    {0.039216f, 0.039216f, 1.000000f}, // 10
    {0.043137f, 0.043137f, 1.000000f}, // 11
    {0.047059f, 0.047059f, 1.000000f}, // 12
    {0.050980f, 0.050980f, 1.000000f}, // 13
    {0.054902f, 0.054902f, 1.000000f}, // 14
    {0.058824f, 0.058824f, 1.000000f}, // 15
    {0.062745f, 0.062745f, 1.000000f}, // 16
    {0.066667f, 0.066667f, 1.000000f}, // 17
    {0.070588f, 0.070588f, 1.000000f}, // 18
    {0.074510f, 0.074510f, 1.000000f}, // 19
    {0.078431f, 0.078431f, 1.000000f}, // 20
    {0.082353f, 0.082353f, 1.000000f}, // 21
    {0.086275f, 0.086275f, 1.000000f}, // 22
    {0.090196f, 0.090196f, 1.000000f}, // 23
    {0.094118f, 0.094118f, 1.000000f}, // 24
    {0.098039f, 0.098039f, 1.000000f}, // 25
    {0.101961f, 0.101961f, 1.000000f}, // 26
    {0.105882f, 0.105882f, 1.000000f}, // 27
    {0.109804f, 0.109804f, 1.000000f}, // 28
    {0.113725f, 0.113725f, 1.000000f}, // 29
    {0.117647f, 0.117647f, 1.000000f}, // 30
    {0.121569f, 0.121569f, 1.000000f}, // 31
    {0.125490f, 0.125490f, 1.000000f}, // 32
    {0.129412f, 0.129412f, 1.000000f}, // 33
    {0.133333f, 0.133333f, 1.000000f}, // 34
    {0.137255f, 0.137255f, 1.000000f}, // 35
    {0.141176f, 0.141176f, 1.000000f}, // 36
    {0.145098f, 0.145098f, 1.000000f}, // 37
    {0.149020f, 0.149020f, 1.000000f}, // 38
    {0.152941f, 0.152941f, 1.000000f}, // 39
    {0.156863f, 0.156863f, 1.000000f}, // 40
    {0.160784f, 0.160784f, 1.000000f}, // 41
    {0.164706f, 0.164706f, 1.000000f}, // 42
    {0.168627f, 0.168627f, 1.000000f}, // 43
    {0.172549f, 0.172549f, 1.000000f}, // 44
    {0.176471f, 0.176471f, 1.000000f}, // 45
    {0.180392f, 0.180392f, 1.000000f}, // 46
    {0.184314f, 0.184314f, 1.000000f}, // 47
    {0.188235f, 0.188235f, 1.000000f}, // 48
    {0.192157f, 0.192157f, 1.000000f}, // 49
    {0.196078f, 0.196078f, 1.000000f}, // 50
    {0.200000f, 0.200000f, 1.000000f}, // 51
    {0.203922f, 0.203922f, 1.000000f}, // 52
    {0.207843f, 0.207843f, 1.000000f}, // 53
    {0.211765f, 0.211765f, 1.000000f}, // 54
    {0.215686f, 0.215686f, 1.000000f}, // 55
    {0.219608f, 0.219608f, 1.000000f}, // 56
    {0.223529f, 0.223529f, 1.000000f}, // 57
    {0.227451f, 0.227451f, 1.000000f}, // 58
    {0.231373f, 0.231373f, 1.000000f}, // 59
    {0.235294f, 0.235294f, 1.000000f}, // 60
    {0.239216f, 0.239216f, 1.000000f}, // 61
    {0.243137f, 0.243137f, 1.000000f}, // 62
    {0.247059f, 0.247059f, 1.000000f}, // 63
    {0.250980f, 0.250980f, 1.000000f}, // 64
    {0.254902f, 0.254902f, 1.000000f}, // 65
    {0.258824f, 0.258824f, 1.000000f}, // 66
    {0.262745f, 0.262745f, 1.000000f}, // 67
    {0.266667f, 0.266667f, 1.000000f}, // 68
    {0.270588f, 0.270588f, 1.000000f}, // 69
    {0.274510f, 0.274510f, 1.000000f}, // 70
    {0.278431f, 0.278431f, 1.000000f}, // 71
    {0.282353f, 0.282353f, 1.000000f}, // 72
    {0.286275f, 0.286275f, 1.000000f}, // 73
    {0.290196f, 0.290196f, 1.000000f}, // 74
    {0.294118f, 0.294118f, 1.000000f}, // 75
    {0.298039f, 0.298039f, 1.000000f}, // 76
    {0.301961f, 0.301961f, 1.000000f}, // 77
    {0.305882f, 0.305882f, 1.000000f}, // 78
    {0.309804f, 0.309804f, 1.000000f}, // 79
    {0.313725f, 0.313725f, 1.000000f}, // 80
    {0.317647f, 0.317647f, 1.000000f}, // 81
    {0.321569f, 0.321569f, 1.000000f}, // 82
    {0.325490f, 0.325490f, 1.000000f}, // 83
    {0.329412f, 0.329412f, 1.000000f}, // 84
    {0.333333f, 0.333333f, 1.000000f}, // 85
    {0.337255f, 0.337255f, 1.000000f}, // 86
    {0.341176f, 0.341176f, 1.000000f}, // 87
    {0.345098f, 0.345098f, 1.000000f}, // 88
    {0.349020f, 0.349020f, 1.000000f}, // 89
    {0.352941f, 0.352941f, 1.000000f}, // 90
    {0.356863f, 0.356863f, 1.000000f}, // 91
    {0.360784f, 0.360784f, 1.000000f}, // 92
    {0.364706f, 0.364706f, 1.000000f}, // 93
    {0.368627f, 0.368627f, 1.000000f}, // 94
    {0.372549f, 0.372549f, 1.000000f}, // 95
    {0.376471f, 0.376471f, 1.000000f}, // 96
    {0.380392f, 0.380392f, 1.000000f}, // 97
    {0.384314f, 0.384314f, 1.000000f}, // 98
    {0.388235f, 0.388235f, 1.000000f}, // 99
    {0.392157f, 0.392157f, 1.000000f}, // 100
    {0.396078f, 0.396078f, 1.000000f}, // 101
    {0.400000f, 0.400000f, 1.000000f}, // 102
    {0.403922f, 0.403922f, 1.000000f}, // 103
    {0.407843f, 0.407843f, 1.000000f}, // 104
    {0.411765f, 0.411765f, 1.000000f}, // 105
    {0.415686f, 0.415686f, 1.000000f}, // 106
    {0.419608f, 0.419608f, 1.000000f}, // 107
    {0.423529f, 0.423529f, 1.000000f}, // 108
    {0.427451f, 0.427451f, 1.000000f}, // 109
    {0.431373f, 0.431373f, 1.000000f}, // 110
    {0.435294f, 0.435294f, 1.000000f}, // 111
    {0.439216f, 0.439216f, 1.000000f}, // 112
    {0.443137f, 0.443137f, 1.000000f}, // 113
    {0.447059f, 0.447059f, 1.000000f}, // 114
    {0.450980f, 0.450980f, 1.000000f}, // 115
    {0.454902f, 0.454902f, 1.000000f}, // 116
    {0.458824f, 0.458824f, 1.000000f}, // 117
    {0.462745f, 0.462745f, 1.000000f}, // 118
    {0.466667f, 0.466667f, 1.000000f}, // 119
    {0.470588f, 0.470588f, 1.000000f}, // 120
    {0.474510f, 0.474510f, 1.000000f}, // 121
    {0.478431f, 0.478431f, 1.000000f}, // 122
    {0.482353f, 0.482353f, 1.000000f}, // 123
    {0.486275f, 0.486275f, 1.000000f}, // 124
    {0.490196f, 0.490196f, 1.000000f}, // 125
    {0.494118f, 0.494118f, 1.000000f}, // 126
    {0.498039f, 0.498039f, 1.000000f}, // 127
    {0.501961f, 0.501961f, 1.000000f}, // 128
    {0.505882f, 0.505882f, 1.000000f}, // 129
    {0.509804f, 0.509804f, 1.000000f}, // 130
    {0.513725f, 0.513725f, 1.000000f}, // 131
    {0.517647f, 0.517647f, 1.000000f}, // 132
    {0.521569f, 0.521569f, 1.000000f}, // 133
    {0.525490f, 0.525490f, 1.000000f}, // 134
    {0.529412f, 0.529412f, 1.000000f}, // 135
    {0.533333f, 0.533333f, 1.000000f}, // 136
    {0.537255f, 0.537255f, 1.000000f}, // 137
    {0.541176f, 0.541176f, 1.000000f}, // 138
    {0.545098f, 0.545098f, 1.000000f}, // 139
    {0.549020f, 0.549020f, 1.000000f}, // 140
    {0.552941f, 0.552941f, 1.000000f}, // 141
    {0.556863f, 0.556863f, 1.000000f}, // 142
    {0.560784f, 0.560784f, 1.000000f}, // 143
    {0.564706f, 0.564706f, 1.000000f}, // 144
    {0.568627f, 0.568627f, 1.000000f}, // 145
    {0.572549f, 0.572549f, 1.000000f}, // 146
    {0.576471f, 0.576471f, 1.000000f}, // 147
    {0.580392f, 0.580392f, 1.000000f}, // 148
    {0.584314f, 0.584314f, 1.000000f}, // 149
    {0.588235f, 0.588235f, 1.000000f}, // 150
    {0.592157f, 0.592157f, 1.000000f}, // 151
    {0.596078f, 0.596078f, 1.000000f}, // 152
    {0.600000f, 0.600000f, 1.000000f}, // 153
    {0.603922f, 0.603922f, 1.000000f}, // 154
    {0.607843f, 0.607843f, 1.000000f}, // 155
    {0.611765f, 0.611765f, 1.000000f}, // 156
    {0.615686f, 0.615686f, 1.000000f}, // 157
    {0.619608f, 0.619608f, 1.000000f}, // 158
    {0.623529f, 0.623529f, 1.000000f}, // 159
    {0.627451f, 0.627451f, 1.000000f}, // 160
    {0.631373f, 0.631373f, 1.000000f}, // 161
    {0.635294f, 0.635294f, 1.000000f}, // 162
    {0.639216f, 0.639216f, 1.000000f}, // 163
    {0.643137f, 0.643137f, 1.000000f}, // 164
    {0.647059f, 0.647059f, 1.000000f}, // 165
    {0.650980f, 0.650980f, 1.000000f}, // 166
    {0.654902f, 0.654902f, 1.000000f}, // 167
    {0.658824f, 0.658824f, 1.000000f}, // 168
    {0.662745f, 0.662745f, 1.000000f}, // 169
    {0.666667f, 0.666667f, 1.000000f}, // 170
    {0.670588f, 0.670588f, 1.000000f}, // 171
    {0.674510f, 0.674510f, 1.000000f}, // 172
    {0.678431f, 0.678431f, 1.000000f}, // 173
    {0.682353f, 0.682353f, 1.000000f}, // 174
    {0.686275f, 0.686275f, 1.000000f}, // 175
    {0.690196f, 0.690196f, 1.000000f}, // 176
    {0.694118f, 0.694118f, 1.000000f}, // 177
    {0.698039f, 0.698039f, 1.000000f}, // 178
    {0.701961f, 0.701961f, 1.000000f}, // 179
    {0.705882f, 0.705882f, 1.000000f}, // 180
    {0.709804f, 0.709804f, 1.000000f}, // 181
    {0.713725f, 0.713725f, 1.000000f}, // 182
    {0.717647f, 0.717647f, 1.000000f}, // 183
    {0.721569f, 0.721569f, 1.000000f}, // 184
    {0.725490f, 0.725490f, 1.000000f}, // 185
    {0.729412f, 0.729412f, 1.000000f}, // 186
    {0.733333f, 0.733333f, 1.000000f}, // 187
    {0.737255f, 0.737255f, 1.000000f}, // 188
    {0.741176f, 0.741176f, 1.000000f}, // 189
    {0.745098f, 0.745098f, 1.000000f}, // 190
    {0.749020f, 0.749020f, 1.000000f}, // 191
    {0.752941f, 0.752941f, 1.000000f}, // 192
    {0.756863f, 0.756863f, 1.000000f}, // 193
    {0.760784f, 0.760784f, 1.000000f}, // 194
    {0.764706f, 0.764706f, 1.000000f}, // 195
    {0.768627f, 0.768627f, 1.000000f}, // 196
    {0.772549f, 0.772549f, 1.000000f}, // 197
    {0.776471f, 0.776471f, 1.000000f}, // 198
    {0.780392f, 0.780392f, 1.000000f}, // 199
    {0.784314f, 0.784314f, 1.000000f}, // 200
    {0.788235f, 0.788235f, 1.000000f}, // 201
    {0.792157f, 0.792157f, 1.000000f}, // 202
    {0.796078f, 0.796078f, 1.000000f}, // 203
    {0.800000f, 0.800000f, 1.000000f}, // 204
    {0.803922f, 0.803922f, 1.000000f}, // 205
    {0.807843f, 0.807843f, 1.000000f}, // 206
    {0.811765f, 0.811765f, 1.000000f}, // 207
    {0.815686f, 0.815686f, 1.000000f}, // 208
    {0.819608f, 0.819608f, 1.000000f}, // 209
    {0.823529f, 0.823529f, 1.000000f}, // 210
    {0.827451f, 0.827451f, 1.000000f}, // 211
    {0.831373f, 0.831373f, 1.000000f}, // 212
    {0.835294f, 0.835294f, 1.000000f}, // 213
    {0.839216f, 0.839216f, 1.000000f}, // 214
    {0.843137f, 0.843137f, 1.000000f}, // 215
    {0.847059f, 0.847059f, 1.000000f}, // 216
    {0.850980f, 0.850980f, 1.000000f}, // 217
    {0.854902f, 0.854902f, 1.000000f}, // 218
    {0.858824f, 0.858824f, 1.000000f}, // 219
    {0.862745f, 0.862745f, 1.000000f}, // 220
    {0.866667f, 0.866667f, 1.000000f}, // 221
    {0.870588f, 0.870588f, 1.000000f}, // 222
    {0.874510f, 0.874510f, 1.000000f}, // 223
    {0.878431f, 0.878431f, 1.000000f}, // 224
    {0.882353f, 0.882353f, 1.000000f}, // 225
    {0.886275f, 0.886275f, 1.000000f}, // 226
    {0.890196f, 0.890196f, 1.000000f}, // 227
    {0.894118f, 0.894118f, 1.000000f}, // 228
    {0.898039f, 0.898039f, 1.000000f}, // 229
    {0.901961f, 0.901961f, 1.000000f}, // 230
    {0.905882f, 0.905882f, 1.000000f}, // 231
    {0.909804f, 0.909804f, 1.000000f}, // 232
    {0.913725f, 0.913725f, 1.000000f}, // 233
    {0.917647f, 0.917647f, 1.000000f}, // 234
    {0.921569f, 0.921569f, 1.000000f}, // 235
    {0.925490f, 0.925490f, 1.000000f}, // 236
    {0.929412f, 0.929412f, 1.000000f}, // 237
    {0.933333f, 0.933333f, 1.000000f}, // 238
    {0.937255f, 0.937255f, 1.000000f}, // 239
    {0.941176f, 0.941176f, 1.000000f}, // 240
    {0.945098f, 0.945098f, 1.000000f}, // 241
    {0.949020f, 0.949020f, 1.000000f}, // 242
    {0.952941f, 0.952941f, 1.000000f}, // 243
    {0.956863f, 0.956863f, 1.000000f}, // 244
    {0.960784f, 0.960784f, 1.000000f}, // 245
    {0.964706f, 0.964706f, 1.000000f}, // 246
    {0.968627f, 0.968627f, 1.000000f}, // 247
    {0.972549f, 0.972549f, 1.000000f}, // 248
    {0.976471f, 0.976471f, 1.000000f}, // 249
    {0.980392f, 0.980392f, 1.000000f}, // 250
    {0.984314f, 0.984314f, 1.000000f}, // 251
    {0.988235f, 0.988235f, 1.000000f}, // 252
    {0.992157f, 0.992157f, 1.000000f}, // 253
    {0.996078f, 0.996078f, 1.000000f}, // 254
    {1.000000f, 1.000000f, 1.000000f}  // 255: Bianco puro
};

__device__ void injectFluid(Vector2f* u, unsigned dim) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;

    if (i >= dim || j >= dim)
        return;

    int idx = IND(i, j, dim);

    // Parameters for the jet
    int jetX = JETX;       // Center of the jet in the horizontal (x) direction
    int jetY = JETY;          // Bottom boundary (j = 0)
    float jetRadius = JETRADIUS;
    float jetSpeed = JETSPEED; // Positive value for upward flow

    // Calculate horizontal distance from the jet center
    float dx = i - jetX;
    float distance = fabsf(dx);

    // Check if the current cell is at the bottom boundary and within the jet radius
    if (j == jetY && distance < jetRadius) {
        // Compute the strength of the jet at this position
        float strength = (jetRadius - distance) / jetRadius;

        // Inject fluid by setting the vertical velocity upwards
        u[idx].x = 7.0f;                // No horizontal velocity
        u[idx].y = jetSpeed * strength; // Vertical velocity upwards
    }
}

__device__ void InitialConditions(Vector2f* u, unsigned dim) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;

    if (i >= dim || j >= dim)
        return;

    int idx = IND(i, j, dim);
    float M_PI = 3.14159265358979323846f; // Pi constant

    // Check if the current cell is at the bottom boundary and within the jet radius
        // Compute the strength of the jet at this position

    // Inject fluid by setting the vertical velocity upwards
    u[idx].x = sinf(i*M_PI)*cosf(j*M_PI);                // No horizontal velocity
    u[idx].y = cosf(i*M_PI)*sinf(j*M_PI); // Vertical velocity upwards
    // printf("u[%d] = (%f, %f)\n", idx, u[idx].x, u[idx].y);
    
}
__device__ void applyVortex(Vector2f* u, Vector2f F, unsigned dim) {
    // Vortex parameters
    float centerX = VORTEX_CENTER_X;
    float centerY = VORTEX_CENTER_Y;
    float vortexStrength = VORTEX_STRENGTH;
    float vortexRadius = VORTEX_RADIUS; // Maximum radius of the vortex effect
    // float timestep = TIMESTEP;

    //Add a Gaussian decay force to the vortex
    //     float xC[2] = { x.x - C.x, x.y - C.y };
    // float exp_val = (xC[0] * xC[0] + xC[1] * xC[1]) / r;
    // int i = static_cast<int>(x.x);
    // int j = static_cast<int>(x.y);
    // float factor = timestep * expf(-exp_val) * 0.001f;
    // Vector2f temp = F * factor;
    // if (i >= 0 && i < dim && j >= 0 && j < dim) {
    //     field[IND(i, j, dim)] += temp;
    // }

    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;


    if (i >= dim || j >= dim)
        return;

    int idx = IND(i, j, dim);

    // Position relative to the vortex center
    float dx = i - centerX;
    float dy = j - centerY;
   
    // Distance from the vortex center
    float distance = sqrtf(dx * dx + dy * dy);

    if (distance >= vortexRadius) {
        // Outside the vortex radius, no modification
        return;
    } else {
        // Normalized distance (0 at center, 1 at vortexRadius)
        float r = distance / vortexRadius;

        // Weight function to control vorticity drop-off
        // Using a quadratic function: weight = (1 - r^2)
        float weight = (1.0f - r * r);

        // Scale the weight by the vortex strength
        weight *= vortexStrength;

        // Avoid division by zero at the center
        if (distance < 0.0001f) {
            // At the center, define the velocity as zero
            u[idx] += Vector2f::Zero();
        } else {
            float inv_distance = 1.0f / distance;

            // Calculate the vortex velocity components
            float vx = -weight * dy * inv_distance;
            float vy = weight * dx * inv_distance;

            // Update the velocity field
            // //Gaussian decay:
            // float exp_val = (dx * dx + dy * dy) / (vortexRadius);
            // float factor = timestep * expf(-exp_val) * 0.001f;
            // Vector2f temp = F * factor;
            // u[idx] += temp;
            // u[idx].x += vx;
            // u[idx].y += vy;
            u[idx].x += vx;
            u[idx].y += vy;
        }
    }
}

// Map velocity magnitude to color using the colormap
__global__ void colorKernel(Vector3f* colorField, Vector2f* velocityField, unsigned dim) {
    // printf("velocityField = %p, colorField = %p, dim = %u\n", velocityField, colorField, dim);
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;
    int idx = IND(i, j, dim);

    if (i >= dim || j >= dim)
        return;

    float velocityMagnitude = velocityField[idx].norm();
    

    // Normalize the magnitude
    float normalizedMagnitude = CLAMP(velocityMagnitude);

    // Map to color using the colormap
    int colorIndex = static_cast<int>(normalizedMagnitude * 255.0f);
    colorIndex = min(max(colorIndex, 0), 255);

    // Access the colormap
    // float r = viridis_colormap[colorIndex][0];
    // float g = viridis_colormap[colorIndex][1];
    // float b = viridis_colormap[colorIndex][2];

    float r = blue_to_white_colormap[colorIndex][0];
    float g = blue_to_white_colormap[colorIndex][1];
    float b = blue_to_white_colormap[colorIndex][2];

    colorField[idx] = Vector3f(r, g, b);
    // printf("colorField[%d] = (%f, %f, %f)\n", idx, r, g, b);
}

// __global__ void colorKernelScalar(Vector3f* colorField, float* scalarField, unsigned int dim, float maxScalar) {

//     int i = blockDim.x * blockIdx.x + threadIdx.x;
//     int j = blockDim.y * blockIdx.y + threadIdx.y;

//     if (i >= dim || j >= dim)
//         return;

//     int idx = IND(i, j, dim);
//     float scalarValue = scalarField[idx];

//     // Normalize the scalar value
//     float normalizedScalar = scalarValue / maxScalar;

//     // Clamp the value between 0 and 1
//     normalizedScalar = CLAMP(normalizedScalar);

//     // Map to color using the colormap
//     int colorIndex = static_cast<int>(normalizedScalar * 255.0f);
//     colorIndex = min(max(colorIndex, 0), 255);

//     // Access the colormap
//     // float r = viridis_colormap[colorIndex][0];
//     // float g = viridis_colormap[colorIndex][1];
//     // float b = viridis_colormap[colorIndex][2];

//     float r = blue_to_white_colormap[colorIndex][0];
//     float g = blue_to_white_colormap[colorIndex][1];
//     float b = blue_to_white_colormap[colorIndex][2];

//     colorField[idx] = Vector3f(r, g, b);
// }
// Map scalar field to color using the colormap, considering obstacles
__global__ void colorKernelScalar(Vector3f* colorField, float* scalarField, int* obstacleField, unsigned dim, float maxScalar) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;

    if (i >= dim || j >= dim)
        return;

    int idx = IND(i, j, dim);

    // Check if the current cell is an obstacle
    if (obstacleField[idx] == 1) {
        // Set color for obstacle cells (e.g., gray)
        colorField[idx] = Vector3f(0.5f, 0.5f, 0.5f); // Gray color for obstacles
        return;
    }

    float scalarValue = scalarField[idx];

    // Normalize the scalar value
    float normalizedValue = scalarValue / maxScalar;

    // Clamp the value between 0 and 1
    normalizedValue = fmaxf(0.0f, fminf(normalizedValue, 1.0f));

    // Map to color using the colormap
    int colorIndex = static_cast<int>(normalizedValue * 255.0f);
    colorIndex = min(max(colorIndex, 0), 255);

    // Access the colormap (blue to white example)
    float r = blue_to_white_colormap[colorIndex][0];
    float g = blue_to_white_colormap[colorIndex][1];
    float b = blue_to_white_colormap[colorIndex][2];

    colorField[idx] = Vector3f(r, g, b);
}

